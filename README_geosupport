/* beta code for support geocouch extension of couchdb--works with couchdb 1.1.0 extended with geocouch (see https://github.com/couchbase/geocouch)
Specific unit tests were not made for this spatial support yet--but existing unit tests survived these changes for the 
modified classes and one or 2 others that consume them.
Example use --with random bounding box--may or may not encompass any of your documents of course and a design doc called 
  "_design/mydoc", and spatial is the default location for the spatial functionality from the geocouch project.
*/
ViewSpatial qv = 
        new ViewSpatial().designDocId("_design/listings")
        .setBoundingBox("-74.980,39.780,-74.9790,39.786");
//as a list of document ids with which to fetch the results...include docs is not an option to my knowledge with
//the geocouch spatial function--or not easily, so this indirect route of fetching with ids is the only way to do it for now
    ViewResult result = db.querySpatial(qv);
    List<T> results = new ArrayList();
    for(ViewResult.Row row : result.getRows()) {
      String id = row.getId();
      int intValue = row.getValueAsInt();
      results.add(db.get(T.class, id));
      //just show ourselves what we're finding as we go along
      System.out.println("Found: " + id + " at row: " + intValue);
    }
    //actually get the documents using the ids
    System.out.println("List of instantiated results has " + results.size() + " elements.");

    //or use count=true flag...one of several supported but not all have been tested yet
    ViewSpatial qv2 = 
        new ViewSpatial().designDocId("_design/listings")
        .setBoundingBox("-74.980,39.780,-74.9790,39.786")
        .setCount(true);
    ViewResult result2 = db.querySpatial(qv2);
    for(ViewResult.Row row : result2.getRows()) {
      System.out.println("Found " + row.getCount() +
          " documents within bounding box");
    }

